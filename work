#!/usr/bin/env python3

#TODO make status report the mode you are in

import sys, getpass, subprocess, os, time

# settings
hostfilename = '/etc/hosts'
blockfilename = '/docs/main/block'
blockTime = 45*60
unblockTime = 15*60

# internals
lockfilename = '/tmp/work-start'
daemonfilename = '/tmp/work-log' or os.devnull
startToken = '## work-begin\n'
endToken = '## work-finish\n'

def end(msg):
    sys.stderr.write(msg)
    exit(1)

if (len(sys.argv) == 1):
    end('usage: sudo work [now|later|status]\n')
else:
    action = sys.argv[1]

if not(action == 'status' or action == 'st' or getpass.getuser() == 'root'):
    end('need root\n')

def getState():
    try:
        with open(lockfilename, 'r') as lockfile:
            mode = lockfile.readline().strip()
            spent = time.time() - float(lockfile.readline())
        return {
            'mode': mode,
            'spent': spent,
        }
    except IOError:
        return {
            'mode': 'boot',
            'spent': blockTime,
        }

def setState(mode):
    with open(lockfilename, 'w') as lockfile:
        lockfile.write('%s\n%d' % (mode, time.time()))

def stringifyState(state):
    return {
        'now': 'working: %d of %d minutes\n' % (state['spent']/60, blockTime/60),
        'later': 'resting: %d of %d minutes\n' % (state['spent']/60, unblockTime/60),
        'boot': 'just booted',
    }.get(state['mode'], 'undefined state')

def block():
    with open(hostfilename, 'a') as hostfile, open(blockfilename, 'r') as blockfile:
        hostfile.write(startToken)
        for url in blockfile:
            url = url.strip()
            if url != '' and url[0] != '#':
                hostfile.write('127.0.0.1\t%s\n127.0.0.1\twww.%s\n' % (url, url))
        hostfile.write(endToken)
    setState('now')

def unblock():
    with open(hostfilename, 'r+') as hostfile:
        contents = hostfile.readlines()
        writing = True
        hostfile.seek(0)
        for line in contents:
            if line == startToken:
                writing = False
            if writing:
                hostfile.write(line)
            if line == endToken:
                writing = True
        hostfile.truncate()
    setState('later')

def fork():
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
    except OSError:
        return False
    return True

def daemonize():
    fork() or end('first fork failed')
    os.chdir('/') # prevent unable to dismount
    os.setsid()   # create new process group
    os.umask(18)  # rw-r--r--
    fork() or end('second fork failed')
    file = open(daemonfilename, 'w+')
    null = file.fileno()
    for fd in [0,1,2]: # stdin = 0, stdout = 1, stderr = 2
        os.close(fd)
        os.dup2(null, fd)

state = getState()
if action == 'status' or action == 'st':
    end(stringifyState(state))
if action == 'now':
    if state['mode'] == 'now':
        sys.stderr.write('extending the block\n')
    block()
elif action == 'later':
    if state['mode'] == 'later':
        end(stringifyState(state))
    elif state['mode'] == 'now' and state['spent'] < blockTime:
        sys.stderr.write('work duration insufficient\n')
        end(stringifyState(state))
    else:
        unblock()
        daemonize()
        time.sleep(unblockTime)
        if getState()['mode'] != 'now':
            block()
else:
    end('usage: sudo work [now|later|status|st]\n')

subprocess.call(['/etc/init.d/networking', 'restart'], stdout=open(daemonfilename, 'w+'))
