#!/usr/bin/env python3

import sys, getpass, subprocess, os, time

def end(msg):
    sys.stderr.write(msg)
    exit(1)

if (len(sys.argv) == 1):
    end('usage: sudo work [now|later]\n')

if (getpass.getuser() != 'root'):
    end('need root\n')

action = sys.argv[1]
hostfilename = '/etc/hosts'
blockfilename = '/docs/main/block'
lockfilename = '/tmp/workstart'
daemonfilename = '/tmp/work-log' or os.devnull
startToken = '## start-work\n'
endToken = '## end-work\n'
lockTime = 45*60
unlockTime = 15*60

def block():
    with open(hostfilename, 'a') as hostfile, open(blockfilename, 'r') as blockfile:
        hostfile.write(startToken)
        for url in blockfile:
            url = url.strip()
            if url != '' and url[0] != '#':
                hostfile.write('127.0.0.1\t%s\n127.0.0.1\twww.%s\n' % (url, url))
        hostfile.write(endToken)
    with open(lockfilename, 'w') as lockfile:
        lockfile.write(str(time.time()))

def unlock():
    try:
        with open(lockfilename, 'r') as lockfile:
            start = float(lockfile.read())
            spent = (time.time() - start)
            if spent < lockTime:
                end('worked %.1f of %d minutes\n' % (spent/60.0, lockTime/60))
    except IOError:
        pass
    with open(hostfilename, 'r+') as hostfile:
        contents = hostfile.readlines()
        writing = True
        hostfile.seek(0)
        for line in contents:
            if line == startToken:
                writing = False
            if writing:
                hostfile.write(line)
            if line == endToken:
                writing = True
        hostfile.truncate()

def fork():
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
    except OSError:
        return False
    return True

def daemonize():
    fork() or end('first fork failed')
    os.chdir('/') # prevent unable to dismount
    os.setsid()   # create new process group
    os.umask(18)  # rw-r--r--
    fork() or end('second fork failed')
    # redirect stdout,stdin,stderr (0,1,2) to /dev/null
    file = open(daemonfilename, 'w+')
    null = file.fileno()
    for fd in [0,1,2]:
        os.close(fd)
        os.dup2(null, fd)

if action == 'now':
    block()
elif action == 'later':
    unlock()
    daemonize()
    time.sleep(unlockTime)
    block()
else:
    end('usage: sudo work [now|later]\n')

subprocess.call(['/etc/init.d/networking', 'restart'], stdout=open(daemonfilename, 'w+'))
